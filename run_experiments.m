function run_experiments()

% Copyright (C) 2015 Tsung-Yu Lin, Aruni RoyChowdhury, Subhransu Maji.
% All rights reserved.
%
% This file is part of the BCNN and is made available under
% the terms of the BSD license (see the COPYING file).


% This code is used for testing different encoding schemes with svm


%% fully connected pooling 
  rcnn.name = 'rcnn' ;
  rcnn.opts = {...
    'type', 'rcnn', ...
    'model', 'data/models/imagenet-vgg-m.mat', ...
    'layer', 19} ;

  rcnnvd.name = 'rcnnvd' ;
  rcnnvd.opts = {...
    'type', 'rcnn', ...
    'model', 'data/models/imagenet-vgg-verydeep-16.mat', ...
    'layer', 35} ;

%% fisher vector CNN
  dcnn.name = 'dcnn' ;
  dcnn.opts = {...
    'type', 'dcnn', ...
    'model', 'data/models/imagenet-vgg-m.mat', ...
    'layer', 14, ...
    'numWords', 64} ;

  dcnnvd.name = 'dcnnvd' ;
  dcnnvd.opts = {...
    'type', 'dcnn', ...
    'model', 'data/models/imagenet-vgg-verydeep-16.mat', ...
    'layer', 30, ...
    'numWords', 64} ;

%% fisher vector SIFT
  dsift.name = 'dsift' ;
  dsift.opts = {...
    'type', 'dsift', ...
    'numWords', 256, ...
    'numPcaDimensions', 80} ;

%% bilinear pooling CNN
  bcnnmm.name = 'bcnnmm' ;
  bcnnmm.opts = {...
    'type', 'bcnn', ...
    'modela', 'data/ft-models/bcnn-cub-mm.mat', ...
    'layera', 14,...
    'modelb', 'data/ft-models/bcnn-cub-mm.mat', ...
    'layerb', 14
    } ;

  bcnnvdm.name = 'bcnnvdm' ;
  bcnnvdm.opts = {...
    'type', 'bcnn', ...
    'modela', 'data/ft-models/bcnn-cub-dm-neta.mat', ...
    'layera', 30,...
    'modelb', 'data/ft-models/bcnn-cub-dm-netb.mat', ...
    'layerb', 14
    } ;

  bcnnvdvd.name = 'bcnnvdvd' ;
  bcnnvdvd.opts = {...
    'type', 'bcnn', ...
    'modela', 'data/ft-models/bcnn-cub-dd.mat', ...
    'layera', 30,...
    'modelb', 'data/ft-models/bcnn-cub-dd.mat', ...
    'layerb', 30,...
    };
  

  setupNameList = {'rcnn', 'dcnn', 'bcnnmm'};   % list of models to train and test
  encoderList = {{rcnn}, {dcnn}, {bcnnmm}};
  datasetList = {{'cub', 1}};


  for ii = 1 : numel(datasetList)
    dataset = datasetList{ii} ;
    if iscell(dataset)
      numSplits = dataset{2} ;
      dataset = dataset{1} ;
    else
      numSplits = 1 ;
    end
    for jj = 1 : numSplits
      for ee = 1: numel(encoderList)
        % train and test the model
        model_train(...
          'dataset', dataset, ...
          'seed', jj, ...
          'encoders', encoderList{ee}, ...
          'prefix', 'exp', ...              % name of the output folder
          'suffix', setupNameList{ee}, ...
          'printDatasetInfo', ee == 1, ...
          'useGpu', 1, ...
          'dataAugmentation', 'f2') ;       %flipping for data augmentation. "none" for no augmentation
      end
    end
  end
end
